=pod

=head1 NAME TDD PL/SQL Tutorial

=head1 DESCRIPTION

Create a PL/SQL function using test-driven development along with the Pluto
testing framework.  The function that we create in this example is a little
contrived, but it should serve our purposes.  We want to create a function
called C<get_row_count> that accepts a table name and returns the count of
rows in the given table.

=head1 STEPS

=head2 An Initial Failing Test

Here is the creation of the base object.

  set serveroutput on;
  set feedback off;
  set echo off;
  
  create or replace type my_test_obj under pluto_obj(
  --
    member procedure test_a_basic_call,
  --
    constructor function my_test_obj
      return self as result
  
  --
  )
  instantiable not final;
  /
  
  show errors;
  
  create or replace type body my_test_obj is
  --
    member procedure test_a_basic_call is
      l_row_count  number;
    begin
      l_row_count                := get_row_count( );
    end test_a_basic_call;
  --
    constructor function my_test_obj
      return self as result is
    begin
      return;
    end my_test_obj;
  --
  end;
  /
  
  show errors;
  
  declare
    ut_obj  my_test_obj := my_test_obj( );
  begin
    null;
    ut_obj.run_tests;
  end;
  /
  
  show errors;

And the output.

  No errors.
  Warning: TYPE BODY created with compilation errors.
  Errors for TYPE BODY MY_TEST_OBJ
  
  LINE/COL ERROR                                                            
  -------- -----------------------------------------------------------------
  6/35     PLS-00201: identifier 'GET_ROW_COUNT' must be declared           
  6/5      PL/SQL: Statement ignored                                        
  ORA-04063: type body "JMCADAMS.MY_TEST_OBJ" has errors
  ORA-06508: PL/SQL: could not find program unit being called: "JMCADAMS.MY_TEST_OBJ"
  ORA-06512: at line 2
  Errors for TYPE BODY MY_TEST_OBJ
  
  LINE/COL ERROR                                                            
  -------- -----------------------------------------------------------------
  6/35     PLS-00201: identifier 'GET_ROW_COUNT' must be declared           
  6/5      PL/SQL: Statement ignored                                        

=head2 Make it pass

Our function

  create or replace function get_row_count
    return number is
  begin
    return 1;
  end get_row_count;

And the output from the test run

  No errors.
  No errors.
  No errors.

=head2 Okay, let's break it again

Add a test for an empty table

  set serveroutput on;
  set feedback off;
  set echo off;
  
  create or replace type my_test_obj under pluto_obj(
  --
    member procedure test_a_basic_call,
  --
    member procedure test_an_empty_table,
  --
    constructor function my_test_obj
      return self as result
  
  --
  )
  instantiable not final;
  /
  
  show errors;
  
  create or replace type body my_test_obj is
  --
    member procedure test_a_basic_call is
      l_row_count  number;
    begin
      l_row_count                := get_row_count( );
    end test_a_basic_call;
  --
    member procedure test_an_empty_table is
    begin
      m_util_object.ok(
        test_passed    => ( get_row_count( 'my_test_tb' ) = 0 ),
        test_label     => 'a count of zero'
      );
    end test_an_empty_table;
  --
    constructor function my_test_obj
      return self as result is
    begin
	  m_util_object := pluto_util_obj();
      return;
    end my_test_obj;
  --
  end;
  /
  
  show errors;
  
  declare
    ut_obj  my_test_obj := my_test_obj( );
  begin
    null;
    ut_obj.run_tests;
  end;
  /
  
  show errors;

And see the error...

  No errors.
  Warning: TYPE BODY created with compilation errors.
  Errors for TYPE BODY MY_TEST_OBJ
  
  LINE/COL ERROR                                                            
  -------- -----------------------------------------------------------------
  12/29    PLS-00306: wrong number or types of arguments in call to 'GET_ROW
           _COUNT'                                                          
                                                                                  
  11/7     PL/SQL: Statement ignored                                        
  ORA-04063: type body "JMCADAMS.MY_TEST_OBJ" has errors
  ORA-06508: PL/SQL: could not find program unit being called: "JMCADAMS.MY_TEST_OBJ"
  ORA-06512: at line 2
  Errors for TYPE BODY MY_TEST_OBJ
  
  LINE/COL ERROR                                                            
  -------- -----------------------------------------------------------------
  12/29    PLS-00306: wrong number or types of arguments in call to 'GET_ROW
           _COUNT'
                                                                                  
  11/7     PL/SQL: Statement ignored


Ooops, we didn't account for a table name

  create or replace function get_row_count( table_name varchar )
    return number is
  begin
    return 1;
  end get_row_count;

Doh, now we don't really need the call to the empyt function

  No errors.
  Warning: TYPE BODY created with compilation errors.
  Errors for TYPE BODY MY_TEST_OBJ
  
  LINE/COL ERROR                                                            
  -------- -----------------------------------------------------------------
  6/37     PLS-00306: wrong number or types of arguments in call to 'GET_ROW
           _COUNT'                                                          
                                                                                  
  6/7      PL/SQL: Statement ignored
  ORA-04063: type body "JMCADAMS.MY_TEST_OBJ" has errors
  ORA-06508: PL/SQL: could not find program unit being called: "JMCADAMS.MY_TEST_OBJ"
  ORA-06512: at line 2
  Errors for TYPE BODY MY_TEST_OBJ
  
  LINE/COL ERROR                                                            
  -------- -----------------------------------------------------------------
  6/37     PLS-00306: wrong number or types of arguments in call to 'GET_ROW
           _COUNT'                                                          
                                                                                  
  6/7      PL/SQL: Statement ignored

So what does the new code look like:

  set serveroutput on;
  set feedback off;
  set echo off;
  
  create or replace type my_test_obj under pluto_obj(
  --
    member procedure test_an_empty_table,
  --
    constructor function my_test_obj
      return self as result
  
  --
  )
  instantiable not final;
  /
  
  show errors;
  
  create or replace type body my_test_obj is
  --
    member procedure test_an_empty_table is
    begin
      m_util_object.ok(
        test_passed    => ( get_row_count( 'my_test_tb' ) = 0 ),
        test_label     => 'a count of zero'
      );
    end test_an_empty_table;
  --
    constructor function my_test_obj
      return self as result is
    begin
	  m_util_object := pluto_util_obj();
      return;
    end my_test_obj;
  --
  end;
  /
  
  show errors;
  
  declare
    ut_obj  my_test_obj := my_test_obj( );
  begin
    null;
    ut_obj.run_tests;
  end;
  /
  
  show errors;

And in the output, we can see that a test failed

  No errors.
  No errors.
  1 - a count of zero failed
  No errors.

Nice, so now let's make it pass... the easy way.

  create or replace function get_row_count( table_name varchar )
    return number is
  begin
    return 0;
  end get_row_count;

And the output is...

  No errors.
  No errors.
  1 - a count of zero passed
  No errors.

Woot, we have passing tests.  We haven't done a lot in regards to
developing our code, but we do have a passing test at least... now
let's make it harder.

=head2 A single record table

Let's change the test code to count a single record table now.

  set serveroutput on;
  set feedback off;
  set echo off;
  
  create or replace type my_test_obj under pluto_obj(
  --
    member procedure test_an_empty_table,
  --
    member procedure test_a_single_record_table,
  --
    constructor function my_test_obj
      return self as result
  
  --
  )
  instantiable not final;
  /
  
  show errors;
  
  create or replace type body my_test_obj is
  --
    member procedure test_an_empty_table is
    begin
      m_util_object.ok(
        test_passed    => ( get_row_count( 'my_test_tb' ) = 0 ),
        test_label     => 'a count of zero'
      );
    end test_an_empty_table;
  --
    member procedure test_a_single_record_table is
    begin
      m_util_object.ok(
        test_passed    => ( get_row_count( 'my_test_tb' ) = 1 ),
        test_label     => 'a count of one'
      );
    end test_a_single_record_table;
  --
    constructor function my_test_obj
      return self as result is
    begin
	  m_util_object := pluto_util_obj();
      return;
    end my_test_obj;
  --
  end;
  /
  
  show errors;
  
  declare
    ut_obj  my_test_obj := my_test_obj( );
  begin
    null;
    ut_obj.run_tests;
  end;
  /
  
  show errors;

And the results...

  No errors.
  No errors.
  1 - a count of zero passed
  2 - a count of one failed
  No errors.

Hrm, that's not nearly as easy to fix since we have hard-coded values.  We
could if/else our function, but we probably need to actually start getting 
some real work done.  To do that, we'll have to add a little setup into our
testing code.



=cut
